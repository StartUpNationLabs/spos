/* tslint:disable */
/* eslint-disable */
/**
 * Micro-Service Restaurant: Dining Service
 * Dining Service Open API definition
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddMenuItemDto } from '../models';
// @ts-ignore
import type { PreparationDto } from '../models';
// @ts-ignore
import type { StartOrderingDto } from '../models';
// @ts-ignore
import type { TableAlreadyTakenException } from '../models';
// @ts-ignore
import type { TableNumberNotFoundException } from '../models';
// @ts-ignore
import type { TableOrder } from '../models';
// @ts-ignore
import type { TableOrderAlreadyBilledException } from '../models';
// @ts-ignore
import type { TableOrderIdNotFoundException } from '../models';
/**
 * TableOrdersApi - axios parameter creator
 * @export
 */
export const TableOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tableOrderId 
         * @param {AddMenuItemDto} addMenuItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerAddMenuItemToTableOrder: async (tableOrderId: string, addMenuItemDto: AddMenuItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableOrderId' is not null or undefined
            assertParamExists('tableOrdersControllerAddMenuItemToTableOrder', 'tableOrderId', tableOrderId)
            // verify required parameter 'addMenuItemDto' is not null or undefined
            assertParamExists('tableOrdersControllerAddMenuItemToTableOrder', 'addMenuItemDto', addMenuItemDto)
            const localVarPath = `/tableOrders/{tableOrderId}`
                .replace(`{${"tableOrderId"}}`, encodeURIComponent(String(tableOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMenuItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tableOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerBillTableOrder: async (tableOrderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableOrderId' is not null or undefined
            assertParamExists('tableOrdersControllerBillTableOrder', 'tableOrderId', tableOrderId)
            const localVarPath = `/tableOrders/{tableOrderId}/bill`
                .replace(`{${"tableOrderId"}}`, encodeURIComponent(String(tableOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tableOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerGetTableOrderById: async (tableOrderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableOrderId' is not null or undefined
            assertParamExists('tableOrdersControllerGetTableOrderById', 'tableOrderId', tableOrderId)
            const localVarPath = `/tableOrders/{tableOrderId}`
                .replace(`{${"tableOrderId"}}`, encodeURIComponent(String(tableOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerListAllTableOrders: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tableOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StartOrderingDto} startOrderingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerOpenTable: async (startOrderingDto: StartOrderingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startOrderingDto' is not null or undefined
            assertParamExists('tableOrdersControllerOpenTable', 'startOrderingDto', startOrderingDto)
            const localVarPath = `/tableOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startOrderingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tableOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerPrepareTableOrder: async (tableOrderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableOrderId' is not null or undefined
            assertParamExists('tableOrdersControllerPrepareTableOrder', 'tableOrderId', tableOrderId)
            const localVarPath = `/tableOrders/{tableOrderId}/prepare`
                .replace(`{${"tableOrderId"}}`, encodeURIComponent(String(tableOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TableOrdersApi - functional programming interface
 * @export
 */
export const TableOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TableOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tableOrderId 
         * @param {AddMenuItemDto} addMenuItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableOrdersControllerAddMenuItemToTableOrder(tableOrderId: string, addMenuItemDto: AddMenuItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableOrdersControllerAddMenuItemToTableOrder(tableOrderId, addMenuItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableOrdersApi.tableOrdersControllerAddMenuItemToTableOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tableOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableOrdersControllerBillTableOrder(tableOrderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableOrdersControllerBillTableOrder(tableOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableOrdersApi.tableOrdersControllerBillTableOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tableOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableOrdersControllerGetTableOrderById(tableOrderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableOrdersControllerGetTableOrderById(tableOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableOrdersApi.tableOrdersControllerGetTableOrderById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableOrdersControllerListAllTableOrders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableOrder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableOrdersControllerListAllTableOrders(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableOrdersApi.tableOrdersControllerListAllTableOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {StartOrderingDto} startOrderingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableOrdersControllerOpenTable(startOrderingDto: StartOrderingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableOrdersControllerOpenTable(startOrderingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableOrdersApi.tableOrdersControllerOpenTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tableOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tableOrdersControllerPrepareTableOrder(tableOrderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PreparationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tableOrdersControllerPrepareTableOrder(tableOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TableOrdersApi.tableOrdersControllerPrepareTableOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TableOrdersApi - factory interface
 * @export
 */
export const TableOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TableOrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {TableOrdersApiTableOrdersControllerAddMenuItemToTableOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerAddMenuItemToTableOrder(requestParameters: TableOrdersApiTableOrdersControllerAddMenuItemToTableOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableOrder> {
            return localVarFp.tableOrdersControllerAddMenuItemToTableOrder(requestParameters.tableOrderId, requestParameters.addMenuItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TableOrdersApiTableOrdersControllerBillTableOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerBillTableOrder(requestParameters: TableOrdersApiTableOrdersControllerBillTableOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableOrder> {
            return localVarFp.tableOrdersControllerBillTableOrder(requestParameters.tableOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TableOrdersApiTableOrdersControllerGetTableOrderByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerGetTableOrderById(requestParameters: TableOrdersApiTableOrdersControllerGetTableOrderByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableOrder> {
            return localVarFp.tableOrdersControllerGetTableOrderById(requestParameters.tableOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerListAllTableOrders(options?: RawAxiosRequestConfig): AxiosPromise<Array<TableOrder>> {
            return localVarFp.tableOrdersControllerListAllTableOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TableOrdersApiTableOrdersControllerOpenTableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerOpenTable(requestParameters: TableOrdersApiTableOrdersControllerOpenTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableOrder> {
            return localVarFp.tableOrdersControllerOpenTable(requestParameters.startOrderingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TableOrdersApiTableOrdersControllerPrepareTableOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tableOrdersControllerPrepareTableOrder(requestParameters: TableOrdersApiTableOrdersControllerPrepareTableOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PreparationDto>> {
            return localVarFp.tableOrdersControllerPrepareTableOrder(requestParameters.tableOrderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for tableOrdersControllerAddMenuItemToTableOrder operation in TableOrdersApi.
 * @export
 * @interface TableOrdersApiTableOrdersControllerAddMenuItemToTableOrderRequest
 */
export interface TableOrdersApiTableOrdersControllerAddMenuItemToTableOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof TableOrdersApiTableOrdersControllerAddMenuItemToTableOrder
     */
    readonly tableOrderId: string

    /**
     * 
     * @type {AddMenuItemDto}
     * @memberof TableOrdersApiTableOrdersControllerAddMenuItemToTableOrder
     */
    readonly addMenuItemDto: AddMenuItemDto
}

/**
 * Request parameters for tableOrdersControllerBillTableOrder operation in TableOrdersApi.
 * @export
 * @interface TableOrdersApiTableOrdersControllerBillTableOrderRequest
 */
export interface TableOrdersApiTableOrdersControllerBillTableOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof TableOrdersApiTableOrdersControllerBillTableOrder
     */
    readonly tableOrderId: string
}

/**
 * Request parameters for tableOrdersControllerGetTableOrderById operation in TableOrdersApi.
 * @export
 * @interface TableOrdersApiTableOrdersControllerGetTableOrderByIdRequest
 */
export interface TableOrdersApiTableOrdersControllerGetTableOrderByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof TableOrdersApiTableOrdersControllerGetTableOrderById
     */
    readonly tableOrderId: string
}

/**
 * Request parameters for tableOrdersControllerOpenTable operation in TableOrdersApi.
 * @export
 * @interface TableOrdersApiTableOrdersControllerOpenTableRequest
 */
export interface TableOrdersApiTableOrdersControllerOpenTableRequest {
    /**
     * 
     * @type {StartOrderingDto}
     * @memberof TableOrdersApiTableOrdersControllerOpenTable
     */
    readonly startOrderingDto: StartOrderingDto
}

/**
 * Request parameters for tableOrdersControllerPrepareTableOrder operation in TableOrdersApi.
 * @export
 * @interface TableOrdersApiTableOrdersControllerPrepareTableOrderRequest
 */
export interface TableOrdersApiTableOrdersControllerPrepareTableOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof TableOrdersApiTableOrdersControllerPrepareTableOrder
     */
    readonly tableOrderId: string
}

/**
 * TableOrdersApi - object-oriented interface
 * @export
 * @class TableOrdersApi
 * @extends {BaseAPI}
 */
export class TableOrdersApi extends BaseAPI {
    /**
     * 
     * @param {TableOrdersApiTableOrdersControllerAddMenuItemToTableOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableOrdersApi
     */
    public tableOrdersControllerAddMenuItemToTableOrder(requestParameters: TableOrdersApiTableOrdersControllerAddMenuItemToTableOrderRequest, options?: RawAxiosRequestConfig) {
        return TableOrdersApiFp(this.configuration).tableOrdersControllerAddMenuItemToTableOrder(requestParameters.tableOrderId, requestParameters.addMenuItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TableOrdersApiTableOrdersControllerBillTableOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableOrdersApi
     */
    public tableOrdersControllerBillTableOrder(requestParameters: TableOrdersApiTableOrdersControllerBillTableOrderRequest, options?: RawAxiosRequestConfig) {
        return TableOrdersApiFp(this.configuration).tableOrdersControllerBillTableOrder(requestParameters.tableOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TableOrdersApiTableOrdersControllerGetTableOrderByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableOrdersApi
     */
    public tableOrdersControllerGetTableOrderById(requestParameters: TableOrdersApiTableOrdersControllerGetTableOrderByIdRequest, options?: RawAxiosRequestConfig) {
        return TableOrdersApiFp(this.configuration).tableOrdersControllerGetTableOrderById(requestParameters.tableOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableOrdersApi
     */
    public tableOrdersControllerListAllTableOrders(options?: RawAxiosRequestConfig) {
        return TableOrdersApiFp(this.configuration).tableOrdersControllerListAllTableOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TableOrdersApiTableOrdersControllerOpenTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableOrdersApi
     */
    public tableOrdersControllerOpenTable(requestParameters: TableOrdersApiTableOrdersControllerOpenTableRequest, options?: RawAxiosRequestConfig) {
        return TableOrdersApiFp(this.configuration).tableOrdersControllerOpenTable(requestParameters.startOrderingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TableOrdersApiTableOrdersControllerPrepareTableOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableOrdersApi
     */
    public tableOrdersControllerPrepareTableOrder(requestParameters: TableOrdersApiTableOrdersControllerPrepareTableOrderRequest, options?: RawAxiosRequestConfig) {
        return TableOrdersApiFp(this.configuration).tableOrdersControllerPrepareTableOrder(requestParameters.tableOrderId, options).then((request) => request(this.axios, this.basePath));
    }
}

