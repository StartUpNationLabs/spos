/* tslint:disable */
/* eslint-disable */
/**
 * Micro-Service Restaurant: Dining Service
 * Dining Service Open API definition
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddTableDto } from '../models';
// @ts-ignore
import type { TableAlreadyExistsException } from '../models';
// @ts-ignore
import type { TableNumberNotFoundException } from '../models';
// @ts-ignore
import type { TableWithOrderDto } from '../models';
/**
 * TablesApi - axios parameter creator
 * @export
 */
export const TablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddTableDto} addTableDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesControllerAddTable: async (addTableDto: AddTableDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addTableDto' is not null or undefined
            assertParamExists('tablesControllerAddTable', 'addTableDto', addTableDto)
            const localVarPath = `/tables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTableDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tableNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesControllerGetTableByNumber: async (tableNumber: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableNumber' is not null or undefined
            assertParamExists('tablesControllerGetTableByNumber', 'tableNumber', tableNumber)
            const localVarPath = `/tables/{tableNumber}`
                .replace(`{${"tableNumber"}}`, encodeURIComponent(String(tableNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesControllerListAllTables: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TablesApi - functional programming interface
 * @export
 */
export const TablesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TablesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddTableDto} addTableDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesControllerAddTable(addTableDto: AddTableDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableWithOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesControllerAddTable(addTableDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TablesApi.tablesControllerAddTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} tableNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesControllerGetTableByNumber(tableNumber: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableWithOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesControllerGetTableByNumber(tableNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TablesApi.tablesControllerGetTableByNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesControllerListAllTables(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableWithOrderDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesControllerListAllTables(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TablesApi.tablesControllerListAllTables']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TablesApi - factory interface
 * @export
 */
export const TablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TablesApiFp(configuration)
    return {
        /**
         * 
         * @param {TablesApiTablesControllerAddTableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesControllerAddTable(requestParameters: TablesApiTablesControllerAddTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableWithOrderDto> {
            return localVarFp.tablesControllerAddTable(requestParameters.addTableDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TablesApiTablesControllerGetTableByNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesControllerGetTableByNumber(requestParameters: TablesApiTablesControllerGetTableByNumberRequest, options?: RawAxiosRequestConfig): AxiosPromise<TableWithOrderDto> {
            return localVarFp.tablesControllerGetTableByNumber(requestParameters.tableNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesControllerListAllTables(options?: RawAxiosRequestConfig): AxiosPromise<Array<TableWithOrderDto>> {
            return localVarFp.tablesControllerListAllTables(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for tablesControllerAddTable operation in TablesApi.
 * @export
 * @interface TablesApiTablesControllerAddTableRequest
 */
export interface TablesApiTablesControllerAddTableRequest {
    /**
     * 
     * @type {AddTableDto}
     * @memberof TablesApiTablesControllerAddTable
     */
    readonly addTableDto: AddTableDto
}

/**
 * Request parameters for tablesControllerGetTableByNumber operation in TablesApi.
 * @export
 * @interface TablesApiTablesControllerGetTableByNumberRequest
 */
export interface TablesApiTablesControllerGetTableByNumberRequest {
    /**
     * 
     * @type {number}
     * @memberof TablesApiTablesControllerGetTableByNumber
     */
    readonly tableNumber: number
}

/**
 * TablesApi - object-oriented interface
 * @export
 * @class TablesApi
 * @extends {BaseAPI}
 */
export class TablesApi extends BaseAPI {
    /**
     * 
     * @param {TablesApiTablesControllerAddTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesControllerAddTable(requestParameters: TablesApiTablesControllerAddTableRequest, options?: RawAxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesControllerAddTable(requestParameters.addTableDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TablesApiTablesControllerGetTableByNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesControllerGetTableByNumber(requestParameters: TablesApiTablesControllerGetTableByNumberRequest, options?: RawAxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesControllerGetTableByNumber(requestParameters.tableNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesControllerListAllTables(options?: RawAxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesControllerListAllTables(options).then((request) => request(this.axios, this.basePath));
    }
}

