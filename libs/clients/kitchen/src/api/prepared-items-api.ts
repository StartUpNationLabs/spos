/* tslint:disable */
/* eslint-disable */
/**
 * Micro-Service Restaurant: Kitchen Service
 * Kitchen Service Open API definition
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ItemAlreadyStartedToBeCookedException } from '../models';
// @ts-ignore
import type { ItemNotStartedToBeCookedException } from '../models';
// @ts-ignore
import type { PreparedItem } from '../models';
// @ts-ignore
import type { PreparedItemDto } from '../models';
// @ts-ignore
import type { PreparedItemIdNotFoundException } from '../models';
// @ts-ignore
import type { Recipe } from '../models';
/**
 * PreparedItemsApi - axios parameter creator
 * @export
 */
export const PreparedItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerFinishToPrepareItemOnPost: async (preparedItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preparedItemId' is not null or undefined
            assertParamExists('preparedItemsControllerFinishToPrepareItemOnPost', 'preparedItemId', preparedItemId)
            const localVarPath = `/preparedItems/{preparedItemId}/finish`
                .replace(`{${"preparedItemId"}}`, encodeURIComponent(String(preparedItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerGetPreparatedItemsToStartByPost: async (post: PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'post' is not null or undefined
            assertParamExists('preparedItemsControllerGetPreparatedItemsToStartByPost', 'post', post)
            const localVarPath = `/preparedItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (post !== undefined) {
                localVarQueryParameter['post'] = post;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerRetrievePreparedItem: async (preparedItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preparedItemId' is not null or undefined
            assertParamExists('preparedItemsControllerRetrievePreparedItem', 'preparedItemId', preparedItemId)
            const localVarPath = `/preparedItems/{preparedItemId}`
                .replace(`{${"preparedItemId"}}`, encodeURIComponent(String(preparedItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerRetrievePreparedItemRecipe: async (preparedItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preparedItemId' is not null or undefined
            assertParamExists('preparedItemsControllerRetrievePreparedItemRecipe', 'preparedItemId', preparedItemId)
            const localVarPath = `/preparedItems/{preparedItemId}/recipe`
                .replace(`{${"preparedItemId"}}`, encodeURIComponent(String(preparedItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerStartToPrepareItemOnPost: async (preparedItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preparedItemId' is not null or undefined
            assertParamExists('preparedItemsControllerStartToPrepareItemOnPost', 'preparedItemId', preparedItemId)
            const localVarPath = `/preparedItems/{preparedItemId}/start`
                .replace(`{${"preparedItemId"}}`, encodeURIComponent(String(preparedItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreparedItemsApi - functional programming interface
 * @export
 */
export const PreparedItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PreparedItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparedItemsControllerFinishToPrepareItemOnPost(preparedItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreparedItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparedItemsControllerFinishToPrepareItemOnPost(preparedItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparedItemsApi.preparedItemsControllerFinishToPrepareItemOnPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparedItemsControllerGetPreparatedItemsToStartByPost(post: PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PreparedItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparedItemsControllerGetPreparatedItemsToStartByPost(post, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparedItemsApi.preparedItemsControllerGetPreparatedItemsToStartByPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparedItemsControllerRetrievePreparedItem(preparedItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreparedItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparedItemsControllerRetrievePreparedItem(preparedItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparedItemsApi.preparedItemsControllerRetrievePreparedItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparedItemsControllerRetrievePreparedItemRecipe(preparedItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparedItemsControllerRetrievePreparedItemRecipe(preparedItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparedItemsApi.preparedItemsControllerRetrievePreparedItemRecipe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} preparedItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparedItemsControllerStartToPrepareItemOnPost(preparedItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreparedItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparedItemsControllerStartToPrepareItemOnPost(preparedItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparedItemsApi.preparedItemsControllerStartToPrepareItemOnPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PreparedItemsApi - factory interface
 * @export
 */
export const PreparedItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PreparedItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {PreparedItemsApiPreparedItemsControllerFinishToPrepareItemOnPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerFinishToPrepareItemOnPost(requestParameters: PreparedItemsApiPreparedItemsControllerFinishToPrepareItemOnPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PreparedItemDto> {
            return localVarFp.preparedItemsControllerFinishToPrepareItemOnPost(requestParameters.preparedItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PreparedItemsApiPreparedItemsControllerGetPreparatedItemsToStartByPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerGetPreparatedItemsToStartByPost(requestParameters: PreparedItemsApiPreparedItemsControllerGetPreparatedItemsToStartByPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PreparedItem>> {
            return localVarFp.preparedItemsControllerGetPreparatedItemsToStartByPost(requestParameters.post, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerRetrievePreparedItem(requestParameters: PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<PreparedItem> {
            return localVarFp.preparedItemsControllerRetrievePreparedItem(requestParameters.preparedItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRecipeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerRetrievePreparedItemRecipe(requestParameters: PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRecipeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Recipe> {
            return localVarFp.preparedItemsControllerRetrievePreparedItemRecipe(requestParameters.preparedItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PreparedItemsApiPreparedItemsControllerStartToPrepareItemOnPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparedItemsControllerStartToPrepareItemOnPost(requestParameters: PreparedItemsApiPreparedItemsControllerStartToPrepareItemOnPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PreparedItem> {
            return localVarFp.preparedItemsControllerStartToPrepareItemOnPost(requestParameters.preparedItemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for preparedItemsControllerFinishToPrepareItemOnPost operation in PreparedItemsApi.
 * @export
 * @interface PreparedItemsApiPreparedItemsControllerFinishToPrepareItemOnPostRequest
 */
export interface PreparedItemsApiPreparedItemsControllerFinishToPrepareItemOnPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PreparedItemsApiPreparedItemsControllerFinishToPrepareItemOnPost
     */
    readonly preparedItemId: string
}

/**
 * Request parameters for preparedItemsControllerGetPreparatedItemsToStartByPost operation in PreparedItemsApi.
 * @export
 * @interface PreparedItemsApiPreparedItemsControllerGetPreparatedItemsToStartByPostRequest
 */
export interface PreparedItemsApiPreparedItemsControllerGetPreparatedItemsToStartByPostRequest {
    /**
     * 
     * @type {'BAR' | 'COLD_DISH' | 'HOT_DISH'}
     * @memberof PreparedItemsApiPreparedItemsControllerGetPreparatedItemsToStartByPost
     */
    readonly post: PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum
}

/**
 * Request parameters for preparedItemsControllerRetrievePreparedItem operation in PreparedItemsApi.
 * @export
 * @interface PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRequest
 */
export interface PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRequest {
    /**
     * 
     * @type {string}
     * @memberof PreparedItemsApiPreparedItemsControllerRetrievePreparedItem
     */
    readonly preparedItemId: string
}

/**
 * Request parameters for preparedItemsControllerRetrievePreparedItemRecipe operation in PreparedItemsApi.
 * @export
 * @interface PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRecipeRequest
 */
export interface PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRecipe
     */
    readonly preparedItemId: string
}

/**
 * Request parameters for preparedItemsControllerStartToPrepareItemOnPost operation in PreparedItemsApi.
 * @export
 * @interface PreparedItemsApiPreparedItemsControllerStartToPrepareItemOnPostRequest
 */
export interface PreparedItemsApiPreparedItemsControllerStartToPrepareItemOnPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PreparedItemsApiPreparedItemsControllerStartToPrepareItemOnPost
     */
    readonly preparedItemId: string
}

/**
 * PreparedItemsApi - object-oriented interface
 * @export
 * @class PreparedItemsApi
 * @extends {BaseAPI}
 */
export class PreparedItemsApi extends BaseAPI {
    /**
     * 
     * @param {PreparedItemsApiPreparedItemsControllerFinishToPrepareItemOnPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparedItemsApi
     */
    public preparedItemsControllerFinishToPrepareItemOnPost(requestParameters: PreparedItemsApiPreparedItemsControllerFinishToPrepareItemOnPostRequest, options?: RawAxiosRequestConfig) {
        return PreparedItemsApiFp(this.configuration).preparedItemsControllerFinishToPrepareItemOnPost(requestParameters.preparedItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PreparedItemsApiPreparedItemsControllerGetPreparatedItemsToStartByPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparedItemsApi
     */
    public preparedItemsControllerGetPreparatedItemsToStartByPost(requestParameters: PreparedItemsApiPreparedItemsControllerGetPreparatedItemsToStartByPostRequest, options?: RawAxiosRequestConfig) {
        return PreparedItemsApiFp(this.configuration).preparedItemsControllerGetPreparatedItemsToStartByPost(requestParameters.post, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparedItemsApi
     */
    public preparedItemsControllerRetrievePreparedItem(requestParameters: PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRequest, options?: RawAxiosRequestConfig) {
        return PreparedItemsApiFp(this.configuration).preparedItemsControllerRetrievePreparedItem(requestParameters.preparedItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRecipeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparedItemsApi
     */
    public preparedItemsControllerRetrievePreparedItemRecipe(requestParameters: PreparedItemsApiPreparedItemsControllerRetrievePreparedItemRecipeRequest, options?: RawAxiosRequestConfig) {
        return PreparedItemsApiFp(this.configuration).preparedItemsControllerRetrievePreparedItemRecipe(requestParameters.preparedItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PreparedItemsApiPreparedItemsControllerStartToPrepareItemOnPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparedItemsApi
     */
    public preparedItemsControllerStartToPrepareItemOnPost(requestParameters: PreparedItemsApiPreparedItemsControllerStartToPrepareItemOnPostRequest, options?: RawAxiosRequestConfig) {
        return PreparedItemsApiFp(this.configuration).preparedItemsControllerStartToPrepareItemOnPost(requestParameters.preparedItemId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum = {
    Bar: 'BAR',
    ColdDish: 'COLD_DISH',
    HotDish: 'HOT_DISH'
} as const;
export type PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum = typeof PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum[keyof typeof PreparedItemsControllerGetPreparatedItemsToStartByPostPostEnum];
