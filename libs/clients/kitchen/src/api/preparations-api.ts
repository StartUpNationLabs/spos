/* tslint:disable */
/* eslint-disable */
/**
 * Micro-Service Restaurant: Kitchen Service
 * Kitchen Service Open API definition
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EmptyItemsToBeCookedSentInKitchenException } from '../models';
// @ts-ignore
import type { PreparationDto } from '../models';
// @ts-ignore
import type { PreparationIdNotFoundException } from '../models';
// @ts-ignore
import type { PreparationNotReadyInKitchenException } from '../models';
// @ts-ignore
import type { PreparationRequestDto } from '../models';
// @ts-ignore
import type { TableNumberNotFoundException } from '../models';
// @ts-ignore
import type { WrongQueryParameterException } from '../models';
/**
 * PreparationsApi - axios parameter creator
 * @export
 */
export const PreparationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum} state 
         * @param {any} [tableNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerGetAllPreparationsByStateAndTableNumber: async (state: PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum, tableNumber?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('preparationsControllerGetAllPreparationsByStateAndTableNumber', 'state', state)
            const localVarPath = `/preparations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tableNumber !== undefined) {
                for (const [key, value] of Object.entries(tableNumber)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} preparationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerPreparationIsServed: async (preparationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preparationId' is not null or undefined
            assertParamExists('preparationsControllerPreparationIsServed', 'preparationId', preparationId)
            const localVarPath = `/preparations/{preparationId}/takenToTable`
                .replace(`{${"preparationId"}}`, encodeURIComponent(String(preparationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PreparationRequestDto} preparationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerRequestNewPreparation: async (preparationRequestDto: PreparationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preparationRequestDto' is not null or undefined
            assertParamExists('preparationsControllerRequestNewPreparation', 'preparationRequestDto', preparationRequestDto)
            const localVarPath = `/preparations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(preparationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} preparationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerRetrievePreparation: async (preparationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preparationId' is not null or undefined
            assertParamExists('preparationsControllerRetrievePreparation', 'preparationId', preparationId)
            const localVarPath = `/preparations/{preparationId}`
                .replace(`{${"preparationId"}}`, encodeURIComponent(String(preparationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreparationsApi - functional programming interface
 * @export
 */
export const PreparationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PreparationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum} state 
         * @param {any} [tableNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparationsControllerGetAllPreparationsByStateAndTableNumber(state: PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum, tableNumber?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PreparationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparationsControllerGetAllPreparationsByStateAndTableNumber(state, tableNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparationsApi.preparationsControllerGetAllPreparationsByStateAndTableNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} preparationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparationsControllerPreparationIsServed(preparationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreparationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparationsControllerPreparationIsServed(preparationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparationsApi.preparationsControllerPreparationIsServed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PreparationRequestDto} preparationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparationsControllerRequestNewPreparation(preparationRequestDto: PreparationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PreparationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparationsControllerRequestNewPreparation(preparationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparationsApi.preparationsControllerRequestNewPreparation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} preparationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preparationsControllerRetrievePreparation(preparationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreparationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preparationsControllerRetrievePreparation(preparationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreparationsApi.preparationsControllerRetrievePreparation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PreparationsApi - factory interface
 * @export
 */
export const PreparationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PreparationsApiFp(configuration)
    return {
        /**
         * 
         * @param {PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerGetAllPreparationsByStateAndTableNumber(requestParameters: PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumberRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PreparationDto>> {
            return localVarFp.preparationsControllerGetAllPreparationsByStateAndTableNumber(requestParameters.state, requestParameters.tableNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PreparationsApiPreparationsControllerPreparationIsServedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerPreparationIsServed(requestParameters: PreparationsApiPreparationsControllerPreparationIsServedRequest, options?: RawAxiosRequestConfig): AxiosPromise<PreparationDto> {
            return localVarFp.preparationsControllerPreparationIsServed(requestParameters.preparationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PreparationsApiPreparationsControllerRequestNewPreparationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerRequestNewPreparation(requestParameters: PreparationsApiPreparationsControllerRequestNewPreparationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PreparationDto>> {
            return localVarFp.preparationsControllerRequestNewPreparation(requestParameters.preparationRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PreparationsApiPreparationsControllerRetrievePreparationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preparationsControllerRetrievePreparation(requestParameters: PreparationsApiPreparationsControllerRetrievePreparationRequest, options?: RawAxiosRequestConfig): AxiosPromise<PreparationDto> {
            return localVarFp.preparationsControllerRetrievePreparation(requestParameters.preparationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for preparationsControllerGetAllPreparationsByStateAndTableNumber operation in PreparationsApi.
 * @export
 * @interface PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumberRequest
 */
export interface PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumberRequest {
    /**
     * 
     * @type {'readyToBeServed' | 'preparationStarted'}
     * @memberof PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumber
     */
    readonly state: PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum

    /**
     * 
     * @type {any}
     * @memberof PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumber
     */
    readonly tableNumber?: any
}

/**
 * Request parameters for preparationsControllerPreparationIsServed operation in PreparationsApi.
 * @export
 * @interface PreparationsApiPreparationsControllerPreparationIsServedRequest
 */
export interface PreparationsApiPreparationsControllerPreparationIsServedRequest {
    /**
     * 
     * @type {string}
     * @memberof PreparationsApiPreparationsControllerPreparationIsServed
     */
    readonly preparationId: string
}

/**
 * Request parameters for preparationsControllerRequestNewPreparation operation in PreparationsApi.
 * @export
 * @interface PreparationsApiPreparationsControllerRequestNewPreparationRequest
 */
export interface PreparationsApiPreparationsControllerRequestNewPreparationRequest {
    /**
     * 
     * @type {PreparationRequestDto}
     * @memberof PreparationsApiPreparationsControllerRequestNewPreparation
     */
    readonly preparationRequestDto: PreparationRequestDto
}

/**
 * Request parameters for preparationsControllerRetrievePreparation operation in PreparationsApi.
 * @export
 * @interface PreparationsApiPreparationsControllerRetrievePreparationRequest
 */
export interface PreparationsApiPreparationsControllerRetrievePreparationRequest {
    /**
     * 
     * @type {string}
     * @memberof PreparationsApiPreparationsControllerRetrievePreparation
     */
    readonly preparationId: string
}

/**
 * PreparationsApi - object-oriented interface
 * @export
 * @class PreparationsApi
 * @extends {BaseAPI}
 */
export class PreparationsApi extends BaseAPI {
    /**
     * 
     * @param {PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparationsApi
     */
    public preparationsControllerGetAllPreparationsByStateAndTableNumber(requestParameters: PreparationsApiPreparationsControllerGetAllPreparationsByStateAndTableNumberRequest, options?: RawAxiosRequestConfig) {
        return PreparationsApiFp(this.configuration).preparationsControllerGetAllPreparationsByStateAndTableNumber(requestParameters.state, requestParameters.tableNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PreparationsApiPreparationsControllerPreparationIsServedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparationsApi
     */
    public preparationsControllerPreparationIsServed(requestParameters: PreparationsApiPreparationsControllerPreparationIsServedRequest, options?: RawAxiosRequestConfig) {
        return PreparationsApiFp(this.configuration).preparationsControllerPreparationIsServed(requestParameters.preparationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PreparationsApiPreparationsControllerRequestNewPreparationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparationsApi
     */
    public preparationsControllerRequestNewPreparation(requestParameters: PreparationsApiPreparationsControllerRequestNewPreparationRequest, options?: RawAxiosRequestConfig) {
        return PreparationsApiFp(this.configuration).preparationsControllerRequestNewPreparation(requestParameters.preparationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PreparationsApiPreparationsControllerRetrievePreparationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreparationsApi
     */
    public preparationsControllerRetrievePreparation(requestParameters: PreparationsApiPreparationsControllerRetrievePreparationRequest, options?: RawAxiosRequestConfig) {
        return PreparationsApiFp(this.configuration).preparationsControllerRetrievePreparation(requestParameters.preparationId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum = {
    ReadyToBeServed: 'readyToBeServed',
    PreparationStarted: 'preparationStarted'
} as const;
export type PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum = typeof PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum[keyof typeof PreparationsControllerGetAllPreparationsByStateAndTableNumberStateEnum];
