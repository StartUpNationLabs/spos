/* tslint:disable */
/* eslint-disable */
/**
 * Micro-Service Restaurant: Menu Service
 * Menu Service Open API definition
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddMenuItemDto } from '../models';
// @ts-ignore
import type { MenuItem } from '../models';
// @ts-ignore
import type { MenuItemIdNotFoundException } from '../models';
// @ts-ignore
import type { MenuItemShortNameAlreadyExistsException } from '../models';
/**
 * MenusApi - axios parameter creator
 * @export
 */
export const MenusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddMenuItemDto} addMenuItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusControllerAddMenuItem: async (addMenuItemDto: AddMenuItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addMenuItemDto' is not null or undefined
            assertParamExists('menusControllerAddMenuItem', 'addMenuItemDto', addMenuItemDto)
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMenuItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusControllerGetFullMenu: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusControllerGetMenuItem: async (menuItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuItemId' is not null or undefined
            assertParamExists('menusControllerGetMenuItem', 'menuItemId', menuItemId)
            const localVarPath = `/menus/{menuItemId}`
                .replace(`{${"menuItemId"}}`, encodeURIComponent(String(menuItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenusApi - functional programming interface
 * @export
 */
export const MenusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddMenuItemDto} addMenuItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menusControllerAddMenuItem(addMenuItemDto: AddMenuItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menusControllerAddMenuItem(addMenuItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.menusControllerAddMenuItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menusControllerGetFullMenu(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menusControllerGetFullMenu(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.menusControllerGetFullMenu']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menusControllerGetMenuItem(menuItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menusControllerGetMenuItem(menuItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.menusControllerGetMenuItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MenusApi - factory interface
 * @export
 */
export const MenusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenusApiFp(configuration)
    return {
        /**
         * 
         * @param {MenusApiMenusControllerAddMenuItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusControllerAddMenuItem(requestParameters: MenusApiMenusControllerAddMenuItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<MenuItem> {
            return localVarFp.menusControllerAddMenuItem(requestParameters.addMenuItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusControllerGetFullMenu(options?: RawAxiosRequestConfig): AxiosPromise<Array<MenuItem>> {
            return localVarFp.menusControllerGetFullMenu(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenusApiMenusControllerGetMenuItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusControllerGetMenuItem(requestParameters: MenusApiMenusControllerGetMenuItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<MenuItem> {
            return localVarFp.menusControllerGetMenuItem(requestParameters.menuItemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for menusControllerAddMenuItem operation in MenusApi.
 * @export
 * @interface MenusApiMenusControllerAddMenuItemRequest
 */
export interface MenusApiMenusControllerAddMenuItemRequest {
    /**
     * 
     * @type {AddMenuItemDto}
     * @memberof MenusApiMenusControllerAddMenuItem
     */
    readonly addMenuItemDto: AddMenuItemDto
}

/**
 * Request parameters for menusControllerGetMenuItem operation in MenusApi.
 * @export
 * @interface MenusApiMenusControllerGetMenuItemRequest
 */
export interface MenusApiMenusControllerGetMenuItemRequest {
    /**
     * 
     * @type {string}
     * @memberof MenusApiMenusControllerGetMenuItem
     */
    readonly menuItemId: string
}

/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
export class MenusApi extends BaseAPI {
    /**
     * 
     * @param {MenusApiMenusControllerAddMenuItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public menusControllerAddMenuItem(requestParameters: MenusApiMenusControllerAddMenuItemRequest, options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).menusControllerAddMenuItem(requestParameters.addMenuItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public menusControllerGetFullMenu(options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).menusControllerGetFullMenu(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenusApiMenusControllerGetMenuItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public menusControllerGetMenuItem(requestParameters: MenusApiMenusControllerGetMenuItemRequest, options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).menusControllerGetMenuItem(requestParameters.menuItemId, options).then((request) => request(this.axios, this.basePath));
    }
}

