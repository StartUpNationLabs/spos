/* tslint:disable */
/* eslint-disable */
/**
 * Payment Sharing API
 * Payment Sharing API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ItemRequestDto } from '../models';
// @ts-ignore
import type { PaymentResponseTableDTO } from '../models';
// @ts-ignore
import type { SelectedByCustomerDTO } from '../models';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get items of a customer
         * @param {string} groupId 
         * @param {string} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerGetCustomerItems: async (groupId: string, ownerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('paymentControllerGetCustomerItems', 'groupId', groupId)
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('paymentControllerGetCustomerItems', 'ownerId', ownerId)
            const localVarPath = `/api/payments/customer-items/{group_id}/{owner_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"owner_id"}}`, encodeURIComponent(String(ownerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get items of the group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerGetTableItems: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('paymentControllerGetTableItems', 'groupId', groupId)
            const localVarPath = `/api/payments/table-items/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {string} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerMakePayment: async (groupId: string, ownerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('paymentControllerMakePayment', 'groupId', groupId)
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('paymentControllerMakePayment', 'ownerId', ownerId)
            const localVarPath = `/api/payments/pay/{groupId}/{ownerId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return an item to the center table
         * @param {ItemRequestDto} itemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerReturnItemToCenterTable: async (itemRequestDto: ItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemRequestDto' is not null or undefined
            assertParamExists('paymentControllerReturnItemToCenterTable', 'itemRequestDto', itemRequestDto)
            const localVarPath = `/api/payments/return-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get items of a customer in real-time
         * @param {string} groupId 
         * @param {string} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerSseCustomerItems: async (groupId: string, ownerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('paymentControllerSseCustomerItems', 'groupId', groupId)
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('paymentControllerSseCustomerItems', 'ownerId', ownerId)
            const localVarPath = `/api/payments/sse/customer-items/{group_id}/{owner_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"owner_id"}}`, encodeURIComponent(String(ownerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get items of the table in real-time
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerSseTableItems: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('paymentControllerSseTableItems', 'groupId', groupId)
            const localVarPath = `/api/payments/sse/table-items/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ItemRequestDto} itemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerTakeItemFromCenterTable: async (itemRequestDto: ItemRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemRequestDto' is not null or undefined
            assertParamExists('paymentControllerTakeItemFromCenterTable', 'itemRequestDto', itemRequestDto)
            const localVarPath = `/api/payments/take-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get items of a customer
         * @param {string} groupId 
         * @param {string} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerGetCustomerItems(groupId: string, ownerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectedByCustomerDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerGetCustomerItems(groupId, ownerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentControllerGetCustomerItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get items of the group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerGetTableItems(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentResponseTableDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerGetTableItems(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentControllerGetTableItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {string} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerMakePayment(groupId: string, ownerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerMakePayment(groupId, ownerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentControllerMakePayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Return an item to the center table
         * @param {ItemRequestDto} itemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerReturnItemToCenterTable(itemRequestDto: ItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerReturnItemToCenterTable(itemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentControllerReturnItemToCenterTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get items of a customer in real-time
         * @param {string} groupId 
         * @param {string} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerSseCustomerItems(groupId: string, ownerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectedByCustomerDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerSseCustomerItems(groupId, ownerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentControllerSseCustomerItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get items of the table in real-time
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerSseTableItems(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentResponseTableDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerSseTableItems(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentControllerSseTableItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ItemRequestDto} itemRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerTakeItemFromCenterTable(itemRequestDto: ItemRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerTakeItemFromCenterTable(itemRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentControllerTakeItemFromCenterTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get items of a customer
         * @param {PaymentsApiPaymentControllerGetCustomerItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerGetCustomerItems(requestParameters: PaymentsApiPaymentControllerGetCustomerItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SelectedByCustomerDTO>> {
            return localVarFp.paymentControllerGetCustomerItems(requestParameters.groupId, requestParameters.ownerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get items of the group
         * @param {PaymentsApiPaymentControllerGetTableItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerGetTableItems(requestParameters: PaymentsApiPaymentControllerGetTableItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PaymentResponseTableDTO>> {
            return localVarFp.paymentControllerGetTableItems(requestParameters.groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaymentsApiPaymentControllerMakePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerMakePayment(requestParameters: PaymentsApiPaymentControllerMakePaymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paymentControllerMakePayment(requestParameters.groupId, requestParameters.ownerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return an item to the center table
         * @param {PaymentsApiPaymentControllerReturnItemToCenterTableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerReturnItemToCenterTable(requestParameters: PaymentsApiPaymentControllerReturnItemToCenterTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paymentControllerReturnItemToCenterTable(requestParameters.itemRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get items of a customer in real-time
         * @param {PaymentsApiPaymentControllerSseCustomerItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerSseCustomerItems(requestParameters: PaymentsApiPaymentControllerSseCustomerItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SelectedByCustomerDTO>> {
            return localVarFp.paymentControllerSseCustomerItems(requestParameters.groupId, requestParameters.ownerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get items of the table in real-time
         * @param {PaymentsApiPaymentControllerSseTableItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerSseTableItems(requestParameters: PaymentsApiPaymentControllerSseTableItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PaymentResponseTableDTO>> {
            return localVarFp.paymentControllerSseTableItems(requestParameters.groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaymentsApiPaymentControllerTakeItemFromCenterTableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerTakeItemFromCenterTable(requestParameters: PaymentsApiPaymentControllerTakeItemFromCenterTableRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paymentControllerTakeItemFromCenterTable(requestParameters.itemRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for paymentControllerGetCustomerItems operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerGetCustomerItemsRequest
 */
export interface PaymentsApiPaymentControllerGetCustomerItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerGetCustomerItems
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerGetCustomerItems
     */
    readonly ownerId: string
}

/**
 * Request parameters for paymentControllerGetTableItems operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerGetTableItemsRequest
 */
export interface PaymentsApiPaymentControllerGetTableItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerGetTableItems
     */
    readonly groupId: string
}

/**
 * Request parameters for paymentControllerMakePayment operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerMakePaymentRequest
 */
export interface PaymentsApiPaymentControllerMakePaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerMakePayment
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerMakePayment
     */
    readonly ownerId: string
}

/**
 * Request parameters for paymentControllerReturnItemToCenterTable operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerReturnItemToCenterTableRequest
 */
export interface PaymentsApiPaymentControllerReturnItemToCenterTableRequest {
    /**
     * 
     * @type {ItemRequestDto}
     * @memberof PaymentsApiPaymentControllerReturnItemToCenterTable
     */
    readonly itemRequestDto: ItemRequestDto
}

/**
 * Request parameters for paymentControllerSseCustomerItems operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerSseCustomerItemsRequest
 */
export interface PaymentsApiPaymentControllerSseCustomerItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerSseCustomerItems
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerSseCustomerItems
     */
    readonly ownerId: string
}

/**
 * Request parameters for paymentControllerSseTableItems operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerSseTableItemsRequest
 */
export interface PaymentsApiPaymentControllerSseTableItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerSseTableItems
     */
    readonly groupId: string
}

/**
 * Request parameters for paymentControllerTakeItemFromCenterTable operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerTakeItemFromCenterTableRequest
 */
export interface PaymentsApiPaymentControllerTakeItemFromCenterTableRequest {
    /**
     * 
     * @type {ItemRequestDto}
     * @memberof PaymentsApiPaymentControllerTakeItemFromCenterTable
     */
    readonly itemRequestDto: ItemRequestDto
}

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @summary Get items of a customer
     * @param {PaymentsApiPaymentControllerGetCustomerItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerGetCustomerItems(requestParameters: PaymentsApiPaymentControllerGetCustomerItemsRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerGetCustomerItems(requestParameters.groupId, requestParameters.ownerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get items of the group
     * @param {PaymentsApiPaymentControllerGetTableItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerGetTableItems(requestParameters: PaymentsApiPaymentControllerGetTableItemsRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerGetTableItems(requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaymentsApiPaymentControllerMakePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerMakePayment(requestParameters: PaymentsApiPaymentControllerMakePaymentRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerMakePayment(requestParameters.groupId, requestParameters.ownerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return an item to the center table
     * @param {PaymentsApiPaymentControllerReturnItemToCenterTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerReturnItemToCenterTable(requestParameters: PaymentsApiPaymentControllerReturnItemToCenterTableRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerReturnItemToCenterTable(requestParameters.itemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get items of a customer in real-time
     * @param {PaymentsApiPaymentControllerSseCustomerItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerSseCustomerItems(requestParameters: PaymentsApiPaymentControllerSseCustomerItemsRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerSseCustomerItems(requestParameters.groupId, requestParameters.ownerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get items of the table in real-time
     * @param {PaymentsApiPaymentControllerSseTableItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerSseTableItems(requestParameters: PaymentsApiPaymentControllerSseTableItemsRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerSseTableItems(requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaymentsApiPaymentControllerTakeItemFromCenterTableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerTakeItemFromCenterTable(requestParameters: PaymentsApiPaymentControllerTakeItemFromCenterTableRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerTakeItemFromCenterTable(requestParameters.itemRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

