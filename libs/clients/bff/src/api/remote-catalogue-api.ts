/* tslint:disable */
/* eslint-disable */
/**
 * BFF API
 * Backend For Frontend API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CategorizedCatalogDto } from '../models';
// @ts-ignore
import type { MenuItemDto } from '../models';
/**
 * RemoteCatalogueApi - axios parameter creator
 * @export
 */
export const RemoteCatalogueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} offerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteCatalogueControllerGetFilteredCatalog: async (offerName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerName' is not null or undefined
            assertParamExists('remoteCatalogueControllerGetFilteredCatalog', 'offerName', offerName)
            const localVarPath = `/api/remoteCatalogue/filteredCatalog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offerName !== undefined) {
                localVarQueryParameter['offerName'] = offerName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteCatalogueControllerGetFullItemFromItemIdsArray: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('remoteCatalogueControllerGetFullItemFromItemIdsArray', 'ids', ids)
            const localVarPath = `/api/remoteCatalogue/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemoteCatalogueApi - functional programming interface
 * @export
 */
export const RemoteCatalogueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemoteCatalogueApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} offerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remoteCatalogueControllerGetFilteredCatalog(offerName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategorizedCatalogDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remoteCatalogueControllerGetFilteredCatalog(offerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemoteCatalogueApi.remoteCatalogueControllerGetFilteredCatalog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remoteCatalogueControllerGetFullItemFromItemIdsArray(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remoteCatalogueControllerGetFullItemFromItemIdsArray(ids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemoteCatalogueApi.remoteCatalogueControllerGetFullItemFromItemIdsArray']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RemoteCatalogueApi - factory interface
 * @export
 */
export const RemoteCatalogueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemoteCatalogueApiFp(configuration)
    return {
        /**
         * 
         * @param {RemoteCatalogueApiRemoteCatalogueControllerGetFilteredCatalogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteCatalogueControllerGetFilteredCatalog(requestParameters: RemoteCatalogueApiRemoteCatalogueControllerGetFilteredCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategorizedCatalogDto> {
            return localVarFp.remoteCatalogueControllerGetFilteredCatalog(requestParameters.offerName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RemoteCatalogueApiRemoteCatalogueControllerGetFullItemFromItemIdsArrayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteCatalogueControllerGetFullItemFromItemIdsArray(requestParameters: RemoteCatalogueApiRemoteCatalogueControllerGetFullItemFromItemIdsArrayRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<MenuItemDto>> {
            return localVarFp.remoteCatalogueControllerGetFullItemFromItemIdsArray(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for remoteCatalogueControllerGetFilteredCatalog operation in RemoteCatalogueApi.
 * @export
 * @interface RemoteCatalogueApiRemoteCatalogueControllerGetFilteredCatalogRequest
 */
export interface RemoteCatalogueApiRemoteCatalogueControllerGetFilteredCatalogRequest {
    /**
     * 
     * @type {string}
     * @memberof RemoteCatalogueApiRemoteCatalogueControllerGetFilteredCatalog
     */
    readonly offerName: string
}

/**
 * Request parameters for remoteCatalogueControllerGetFullItemFromItemIdsArray operation in RemoteCatalogueApi.
 * @export
 * @interface RemoteCatalogueApiRemoteCatalogueControllerGetFullItemFromItemIdsArrayRequest
 */
export interface RemoteCatalogueApiRemoteCatalogueControllerGetFullItemFromItemIdsArrayRequest {
    /**
     * 
     * @type {string}
     * @memberof RemoteCatalogueApiRemoteCatalogueControllerGetFullItemFromItemIdsArray
     */
    readonly ids: string
}

/**
 * RemoteCatalogueApi - object-oriented interface
 * @export
 * @class RemoteCatalogueApi
 * @extends {BaseAPI}
 */
export class RemoteCatalogueApi extends BaseAPI {
    /**
     * 
     * @param {RemoteCatalogueApiRemoteCatalogueControllerGetFilteredCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteCatalogueApi
     */
    public remoteCatalogueControllerGetFilteredCatalog(requestParameters: RemoteCatalogueApiRemoteCatalogueControllerGetFilteredCatalogRequest, options?: RawAxiosRequestConfig) {
        return RemoteCatalogueApiFp(this.configuration).remoteCatalogueControllerGetFilteredCatalog(requestParameters.offerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RemoteCatalogueApiRemoteCatalogueControllerGetFullItemFromItemIdsArrayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteCatalogueApi
     */
    public remoteCatalogueControllerGetFullItemFromItemIdsArray(requestParameters: RemoteCatalogueApiRemoteCatalogueControllerGetFullItemFromItemIdsArrayRequest, options?: RawAxiosRequestConfig) {
        return RemoteCatalogueApiFp(this.configuration).remoteCatalogueControllerGetFullItemFromItemIdsArray(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
}

